@Scheduled(cron = "0 0 1 * * ?")	定时任务

URLDecoder & URLEncoder

@Transactional：声明式事务

@Id 标注用于声明一个实体类的属性映射为数据库的主键列。
@GeneratedValue 用于标注主键的生成策略，通过strategy 属性指定。@GeneratedValue(strategy=GenerationType.AUTO)
–IDENTITY：采用数据库ID自增长的方式来自增主键字段，Oracle 不支持这种方式； 
–AUTO： JPA自动选择合适的策略，是默认选项； 
–SEQUENCE：通过序列产生主键，通过@SequenceGenerator 注解指定序列名，MySql不支持这种方式 
–TABLE：通过表产生主键，框架借由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植。

jpa分页查询：https://blog.csdn.net/Jae_Wang/article/details/80630776
public interface OrderMasterRepository extends JpaRepository<OrderMaster, String> {
 
    // 根据openid来查询一条条的OrdeMaster以分页显示出来
    Page<OrderMaster> findByBuyerOpenid(String buyerOpenid, Pageable pageable);
}

@Query注解的用法：https://www.cnblogs.com/zj0208/p/6008627.html

@RequestParam和@PathVariable

spring.profiles.active=dev		启用dev配置

jackson:
属性为null不参加序列化：
1、在属性上加@JsonInclude(Include.NON_NULL) 
2、代码中
ObjectMapper mapper = new ObjectMapper();
mapper.setSerializationInclusion(Include.NON_NULL);  
//通过该方法对mapper对象进行设置，所有序列化的对象都将按改规则进行系列化 
//Include.Include.ALWAYS 默认 
//Include.NON_DEFAULT 属性为默认值不序列化 
//Include.NON_EMPTY 属性为 空（“”） 或者为 NULL 都不序列化 
//Include.NON_NULL 属性为NULL 不序列化 
注意：只对VO起作用，Map List不起作用


ClassLoader.getResourceAsStream() 加载配置文件资源

IOUtils		BooleanUtil		StringUtil.defaultIfBlank		CSVFormat		CSVPrinter		FileWriterWithEncoding		CSVFormat

gitlab ssh配置
https://www.cnblogs.com/hafiz/p/8146324.html

@Get
@Path

mybatis三种动态sql			https://www.cnblogs.com/guoyafenghome/p/9123442.html


undertow		https://www.jianshu.com/p/e625b8aa0e80


JAX-RS构建restful服务 https://www.cnblogs.com/zhangliwei/p/8284079.html		resteasy	https://www.cnblogs.com/langtianya/p/7624647.html

oracle初始密码：
system默认:manager
sys默认:change_on_install
使用SQL Plus登录数据库时，system使用密码manager可直接登录。
但如果是sys用户，密码必须加上as sysdba，即完整密码为：change_on_install as sysdba

oracle教程：https://www.cnblogs.com/linjiqin/archive/2012/01/31/2332616.html

Map.getOrDefault method could be used to replace the code like this:
      String val = map.containsKey(key) ? map.get(key) : "none";
Map.computeIfAbsent method could be used to replace the code like this:
      List<String> list = map.get(key);
      if (list == null) {
        list = new ArrayList<>();
        map.put(key, list);
      }
eg:// java8之后。上面的操作可以简化为一行，若key对应的value为空，会将第二个参数的返回值存入并返回
Object key2 = map.computeIfAbsent("key", k -> new Object());

Map.putIfAbsent method could be used to replace the code like this:
      String val = map.get(key);
      if (val == null) map.put(key, newVal);
Map.merge method could be used to replace the code like this:
      Integer val = map.get(key);
      if (val == null) map.put(key, 1);
      else map.put(key, val + 1);


git操作：
查看分支git branch
获取分支git fetch origin dev
在本地创建分支dev并切换到该分支git checkout -b dev origin/dev
把gitLab上dev分支上的内容都拉取到本地了git pull origin dev

postgres:character varying（变长，有长度限制）、character、（定长，不足补空白）text（变长，无长度限制）
序列对象（也叫序列生成器）就是用CREATE SEQUENCE 创建的特殊的单行表。一个序列对象通常用于为行或者表生成唯一的标识符。
CREATE [ TEMPORARY | TEMP ] SEQUENCE name [ INCREMENT [ BY ] increment ]
    [ MINVALUE minvalue | NO MINVALUE ] [ MAXVALUE maxvalue | NO MAXVALUE ]
    [ START [ WITH ] start ] [ CACHE cache ] [ [ NO ] CYCLE ]
    [ OWNED BY { table.column | NONE } ]
CREATE SEQUENCE S_SERVER
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 20;
postgres序列：https://www.cnblogs.com/mchina/archive/2013/04/10/3012493.html
	
delete只删除表的数据，是DML语句，操作会放在rollback segement中，事务提交后才生效，可以出发trigger；drop和truncate是DDL语句，操作后即生效，drop删除表，truncate清空表

mybaits注解开发动态sql异常：Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 758; 元素内容必须由格式
在注解字符串中，除where和if关键标签外，不能够使用<号，即小于符号，具体原因未明。建议将小于号改成大于号，字段调换一下位置即可。

@Select("select * from user_information where user_alias like '%#{name}%')")
由于模糊查询需要添加单独的   '    ' 导致占位符被当做字符串而没有被替换,会造成如下异常:
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.type.TypeException: 
常用解决方法是:数据库字符拼接	@Select("select * from user_information where user_alias like concat(concat('%',#{name}),'%')")

oracle分页查询：
SELECT * FROM  
(  
SELECT A.*, ROWNUM RN  
FROM (SELECT * FROM TABLE_NAME) A  
WHERE ROWNUM <= 40  
)  
WHERE RN >= 21  

数组，List，Set相互转化
https://blog.csdn.net/kye055947/article/details/80561633

//导出csv加上UTF-8文件的标识字符      
out.write(new   byte []{( byte ) 0xEF ,( byte ) 0xBB ,( byte ) 0xBF });

装饰模式：抽象构件类，具体构件类，抽象装饰类，具体装饰类。装饰模式用于动态的为对象增加功能，装饰类与被装饰类不会相互耦合。
现实中一般为半透明的装饰模式：具体装饰类的接口和构建类的接口不完全一致

一个多模块项目通过一个父POM 引用一个或多个子模块来定义。父项目，通过以下配置，将子项目关联。
<packaging>pom</packaging>
<modules>
          <module>simple-weather</module>
          <module>simple-webapp</module>
</modules>
子项目中需要配置：
<parent>
        <groupId>org.sonatype.mavenbook.ch06</groupId>
        <artifactId>simple-parent</artifactId>
        <version>1.0</version>
</parent>

package命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库
install命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库
deploy命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库　　


mvn生命周期（lifecycle）由各个阶段组成，每个阶段由maven的插件plugin来执行完成。生命周期（lifecycle）主要包括clean、resources、complie、install、package、testResources、testCompile等，其中带test开头的都是用业编译测试代码或运行单元测试用例的。 

maven配置文件scope标签的分类
1.compile：默认值 他表示被依赖项目需要参与当前项目的编译，还有后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去
2.test：依赖项目仅仅参与测试相关的工作，包括测试代码的编译和执行，不会被打包，例如：junit
3.runtime：表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过了编译而已。例如JDBC驱动，适用运行和测试阶段
4.provided：打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是打包阶段做了exclude操作
5.system：从参与度来说，和provided相同，不过被依赖项不会从maven仓库下载，而是从本地文件系统拿。需要添加systemPath的属性来定义路径

maven配置文件<build>标签
<build>  
  <defaultGoal>install</defaultGoal>  
  <directory>${basedir}/target</directory>  
  <finalName>${artifactId}-${version}</finalName> 
  <filters>
   <filter>filters/filter1.properties</filter>
  </filters> 
  <resources>  
          <resource>  
             <targetPath>META-INF/plexus</targetPath>  
             <filtering>true</filtering>  
            <directory>${basedir}/src/main/plexus</directory>  
            <includes>  
                <include>configuration.xml</include>  
            </includes>  
            <excludes>  
                <exclude>**/*.properties</exclude>  
            </excludes>  
         </resource>  
    </resources>  
    <plugins>
	<plugin>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-maven-plugin</artifactId>
	</plugin>
    </plugins>
  ...
</build> 
1）defaultGoal
    执行build任务时，如果没有指定目标，将使用的默认值。
    如上配置：在命令行中执行mvn，则相当于执行mvn install
2）directory
     build目标文件的存放目录，默认在${basedir}/target目录
3）finalName
     build目标文件的名称，默认情况为${artifactId}-${version}
4）filter
     定义*.properties文件，包含一个properties列表，该列表会应用到支持filter的resources中。
     也就是说，定义在filter的文件中的name=value键值对，会在build时代替${name}值应用到resources中。
     maven的默认filter文件夹为${basedir}/src/main/filters
5）resources
    一个resources元素的列表。每一个都描述与项目关联的文件是什么和在哪里
6）targetPath
    指定build后的resource存放的文件夹，默认是basedir。
    通常被打包在jar中的resources的目标路径是META-INF
7）filtering
    true/false，表示为这个resource，filter是否激活
8）directory
    定义resource文件所在的文件夹，默认为${basedir}/src/main/resources
9）includes
    指定哪些文件将被匹配，以*作为通配符
10）excludes
   指定哪些文件将被忽略

maven使用详解：https://blog.csdn.net/hcmony/article/details/56013655





